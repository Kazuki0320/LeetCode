class Solution {
    fun pivotIndex(nums: IntArray): Int {
        val totalSum = nums.sum() // 配列全体の合計
        var leftSum = 0 //左側の合計を初期化

        for (i in nums.indices) {
            val rightSum = totalSum - leftSum - nums[i] //右側の合計を計算
            if (leftSum == rightSum) {
                return i
            }
            leftSum += nums[i]
        }
        return -1
    }
}

/*
【問題理解】
・インデックスの左側にある全ての数値の合計と右側にある全ての数値の合計が等しい時のピボットインデックスを求める問題

【アプローチ】
・ピボットインデックスを求める
- 左端と右端のポインタが必要
- 配列のあるインデックスiについて、その左側にある要素の合計と右側にある要素の合計が等しい場合、そのインデックスiをピボットインデックスと呼ぶ
- 左側のインデックスの場合、左側の合計は0
- 右側のインデックスの場合、右側の合計は0
・配列全体の合計を計算
- 配列内の合計を計算。この値を使って右側の合計を計算できる。
・部分合計を計算
- 左側の合計は0から始める
- 配列の各要素について、左側の合計と右側の合計を比較
- 右側の合計は、配列全体の合計-左側の合計-現在の要素で計算ができる
・比較
- 左側の合計と右側の合計が等しい場合、そのインデックスを返す
・最終的な処理
- 全てのインデックスを確認しても条件を満たすものがなければ-1を返す
 */
