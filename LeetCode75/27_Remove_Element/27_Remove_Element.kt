class Solution {
    fun removeElement(nums: IntArray, `val`: Int): Int {
        var k = 0

        for (i in nums.indices) {
            if (nums[i] != `val`) {
                nums[k] = nums[i]
                k++
            }
        }
        return k
    }
}
/*
【アプローチ】
<要件の明確化>
・インプレースで削除
    - 配列をその場で変更し、追加のメモリを使わないようにする
・kの値を求める
    - 配列内のvalと等しくない要素の数を計算する
・順序は自由
    - 配列の要素の順序は変わっても問題ない

<アルゴリズムで考える>
・2ポインタアプローチ
    - ポインタ1(i):配列をループして全ての要素を調べる
    - ポインタ2(k):有効な要素（val以外）を追跡し、保存する位置を指す
・具体的な動作
    - 配列の先頭から1つずつ走査を行う(iを使う)
    - 現在の要素がvalと等しくない場合、nums[k]にその要素を保存し、kを1つ進める
    - ループが終わったら、kが新しい配列の長さ(valを取り除いた後の要素数)となる

<実装>
・初期化
    -　kを0に初期化
・ループ
    - 配列を1つずつチェック（for文）
・条件判定
    - nums[i] != valの場合、nums[k] = nums[i]を実行し、kを増加させる
・結果を返す
    - 最後にkを返す
 */
